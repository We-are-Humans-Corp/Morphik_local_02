#!/bin/bash
echo "üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Perplexity CLI –¥–ª—è PyCharm..."

mkdir -p ~/.local/bin

# –°–æ–∑–¥–∞–µ–º Python —Å–∫—Ä–∏–ø—Ç (–ø–æ–ª–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≤–µ–¥–µ–Ω –Ω–∏–∂–µ)
cat > ~/.local/bin/pplx << 'EOF'
#!/usr/bin/env python3
"""–ö–∞—Å—Ç–æ–º–Ω—ã–π Perplexity CLI –¥–ª—è PyCharm —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–∞–π–ª–æ–≤ –∏ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
import os, sys, requests, json, argparse
from pathlib import Path

class PerplexityProjectAnalyzer:
    def __init__(self, api_key=None):
        self.api_key = api_key or os.getenv('PERPLEXITY_API_KEY')
        if not self.api_key:
            raise ValueError("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PERPLEXITY_API_KEY")
        
        self.base_url = "https://api.perplexity.ai/chat/completions"
        self.headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
    
    def read_file(self, file_path):
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                return f.read()
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {str(e)}"
    
    def scan_project(self, project_path="."):
        project_info = {"structure": [], "python_files": [], "config_files": [], "total_files": 0}
        
        for root, dirs, files in os.walk(project_path):
            dirs[:] = [d for d in dirs if not d.startswith('.') and d not in ['venv', '__pycache__']]
            
            for file in files:
                if file.startswith('.') and file not in ['.env', '.gitignore']:
                    continue
                    
                file_path = os.path.join(root, file)
                rel_path = os.path.relpath(file_path, project_path)
                project_info["structure"].append(rel_path)
                project_info["total_files"] += 1
                
                if file.endswith('.py'):
                    project_info["python_files"].append(rel_path)
                elif file in ['requirements.txt', '.env', 'setup.py', 'README.md']:
                    project_info["config_files"].append(rel_path)
        
        return project_info
    
    def prepare_context(self, query, file_path=None, project_scan=False):
        context = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å: {query}\n\n"
        
        if file_path:
            if os.path.isfile(file_path):
                file_content = self.read_file(file_path)
                context += f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ {file_path}:\n``````\n\n"
        
        if project_scan:
            project_info = self.scan_project()
            context += f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ:\n"
            context += f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {project_info['total_files']}\n"
            context += f"Python —Ñ–∞–π–ª—ã: {', '.join(project_info['python_files'][:10])}\n"
            context += f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞: {', '.join(project_info['structure'][:20])}\n\n"
        
        return context
    
    def query_perplexity(self, context, model="sonar-pro"):
        payload = {
            "model": model,
            "messages": [
                {
                    "role": "system",
                    "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–¥ –∏ –¥–∞–µ—à—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
                },
                {
                    "role": "user",
                    "content": context
                }
            ],
            "max_tokens": 4000,
            "temperature": 0.2
        }
        
        try:
            response = requests.post(self.base_url, headers=self.headers, json=payload)
            response.raise_for_status()
            return response.json()['choices'][0]['message']['content']
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {str(e)}"

def main():
    parser = argparse.ArgumentParser(description="Perplexity AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤")
    parser.add_argument("query", help="–í–∞—à –≤–æ–ø—Ä–æ—Å")
    parser.add_argument("-f", "--file", help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É")
    parser.add_argument("-p", "--project", action="store_true", help="–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç")
    parser.add_argument("-k", "--api-key", help="API –∫–ª—é—á")
    parser.add_argument("-m", "--model", default="sonar-pro", help="–ú–æ–¥–µ–ª—å")
    
    args = parser.parse_args()
    
    try:
        analyzer = PerplexityProjectAnalyzer(api_key=args.api_key)
        context = analyzer.prepare_context(args.query, args.file, args.project)
        
        print("üß† –û–±—Ä–∞—â–∞—é—Å—å –∫ Perplexity AI...")
        print("=" * 50)
        
        response = analyzer.query_perplexity(context, args.model)
        print(response)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    main()
EOF

chmod +x ~/.local/bin/pplx

# –î–æ–±–∞–≤–ª—è–µ–º –≤ PATH
echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.bashrc

# –°–æ–∑–¥–∞–µ–º —É–¥–æ–±–Ω—ã–µ aliases
echo 'alias pplx-analyze="pplx --project"' >> ~/.bashrc
echo 'alias pplx-file="pplx --file"' >> ~/.bashrc

echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"

chmod +x install_perplexity.sh
./install_perplexity.sh
source ~/.bashrc


